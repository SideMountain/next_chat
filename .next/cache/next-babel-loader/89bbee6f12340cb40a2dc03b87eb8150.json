{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\env\\\\react\\\\next_chat\\\\components\\\\TalkList.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport Router from 'next/router';\n\nvar TalkList = /*#__PURE__*/function (_Component) {\n  _inherits(TalkList, _Component);\n\n  var _super = _createSuper(TalkList);\n\n  function TalkList(props) {\n    var _this;\n\n    _classCallCheck(this, TalkList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"style\", {\n      fontSize: '12pt',\n      padding: '5px 10px'\n    });\n\n    _this.state = {\n      data: [],\n      activeUserData: [],\n      talkData: []\n    };\n\n    _this.getUserList();\n\n    console.log('とお');\n    return _this;\n  } // 友人データ取得\n\n\n  _createClass(TalkList, [{\n    key: \"getUserList\",\n    value: function getUserList() {\n      var _this2 = this;\n\n      var db = firebase.database();\n      var ref = db.ref('friend_info/1');\n      var self = this;\n      ref.orderByKey().on('value', function (snapshot) {\n        console.log(JSON.stringify(snapshot.val()));\n        self.setState({\n          data: snapshot.val()\n        }, function () {\n          _this2.getActiveUserList();\n        });\n      });\n    } // アクティブユーザのみデータ取得\n\n  }, {\n    key: \"getActiveUserList\",\n    value: function getActiveUserList() {\n      var _this3 = this;\n\n      var activeUserList = [];\n      var db = firebase.database();\n      var ref;\n      var self = this;\n\n      for (var i in this.state.data) {\n        if (this.state.data[i].active_flag == 0) {\n          break;\n        }\n\n        ref = db.ref('user_info/' + i);\n        ref.orderByKey().on('value', function (snapshot) {\n          activeUserList.push(snapshot.val());\n          self.setState({\n            activeUserData: activeUserList\n          });\n        }, function () {\n          _this3.getTalkList();\n        });\n      }\n    } // トークリスト取得\n\n  }, {\n    key: \"getTalkList\",\n    value: function getTalkList() {\n      var talkList = [];\n      var db = firebase.database();\n      var ref;\n      var self = this;\n      console.log('徹');\n\n      for (var i in this.state.activeUserData) {\n        ref = db.ref('messages/1/' + i);\n        ref.orderByKey().limitToLast(1).on('value', function (snapshot) {\n          talkList.push(snapshot.val());\n          self.setState({\n            talkData: talkList\n          });\n        });\n      }\n    } // 表示するトークリストの生成\n\n  }, {\n    key: \"createTalkList\",\n    value: function createTalkList() {\n      var result = [];\n\n      if (this.state.talkData == null || this.state.talkData.length == 0) {\n        return [__jsx(\"tr\", {\n          key: \"0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }\n        }, __jsx(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }\n        }, \"NO DATA.\"))];\n      }\n\n      for (var i in this.state.talkData) {\n        result.push(__jsx(\"tr\", {\n          \"data-tag\": this.state.talkData[i].id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }\n        }, __jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }\n        }, \"username\"), __jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }\n        }, this.state.talkData[i].content)));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if (this.state.data.length == 0) {\n      //     this.getUserList();\n      // }\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, __jsx(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }\n      }, __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }\n      }, this.createTalkList())));\n    }\n  }]);\n\n  return TalkList;\n}(Component);\n\nexport default TalkList;","map":{"version":3,"sources":["C:/env/react/next_chat/components/TalkList.js"],"names":["React","Component","firebase","Router","TalkList","props","fontSize","padding","state","data","activeUserData","talkData","getUserList","console","log","db","database","ref","self","orderByKey","on","snapshot","JSON","stringify","val","setState","getActiveUserList","activeUserList","i","active_flag","push","getTalkList","talkList","limitToLast","result","length","id","content","createTalkList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\nimport 'firebase/storage';\r\nimport Router from 'next/router';\r\n\r\nclass TalkList extends Component {\r\n    style = {\r\n        fontSize: '12pt',\r\n        padding: '5px 10px'\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            activeUserData: [],\r\n            talkData: []\r\n        }\r\n        this.getUserList();\r\n        console.log('とお');\r\n    }\r\n\r\n    // 友人データ取得\r\n    getUserList() {\r\n        let db = firebase.database();\r\n        let ref = db.ref('friend_info/1');\r\n        let self = this;\r\n        ref.orderByKey().on('value', (snapshot) => {\r\n            console.log(JSON.stringify(snapshot.val()));\r\n            self.setState({\r\n                data: snapshot.val()\r\n            }, () => {this.getActiveUserList();});\r\n        });\r\n    }\r\n\r\n    // アクティブユーザのみデータ取得\r\n    getActiveUserList() {\r\n        let activeUserList = [];\r\n        let db = firebase.database();\r\n        let ref;\r\n        let self = this;\r\n\r\n        for (let i in this.state.data) {\r\n            if (this.state.data[i].active_flag == 0) {\r\n                break;\r\n            }\r\n            ref = db.ref('user_info/' + i);\r\n            ref.orderByKey().on('value', (snapshot) => {\r\n                activeUserList.push(snapshot.val());\r\n                self.setState({\r\n                    activeUserData: activeUserList\r\n                });\r\n            }, () => {this.getTalkList()});\r\n        }\r\n    }\r\n\r\n    // トークリスト取得\r\n    getTalkList() {\r\n        let talkList = [];\r\n        let db = firebase.database();\r\n        let ref;\r\n        let self = this;\r\n        console.log('徹');\r\n\r\n        for (let i in this.state.activeUserData) {\r\n            ref = db.ref('messages/1/' + i);\r\n            ref.orderByKey().limitToLast(1).on('value', (snapshot) => {\r\n                talkList.push(snapshot.val());\r\n                self.setState({\r\n                    talkData: talkList\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    // 表示するトークリストの生成\r\n    createTalkList() {\r\n        let result = [];\r\n        if (this.state.talkData == null || this.state.talkData.length == 0) {\r\n            return [<tr key=\"0\"><th>NO DATA.</th></tr>];\r\n        }\r\n        for (let i in this.state.talkData) {\r\n            result.push(\r\n                <tr data-tag={this.state.talkData[i].id}>\r\n                    <td>username</td>\r\n                    <td>\r\n                        {this.state.talkData[i].content}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        // if (this.state.data.length == 0) {\r\n        //     this.getUserList();\r\n        // }\r\n        return (\r\n            <div>\r\n                {/* {this.state.talkList.length == 0\r\n                ?\r\n                <p>Please wait...</p>\r\n                : */}\r\n                <table>\r\n                    <tbody>\r\n                        {this.createTalkList()}\r\n                    </tbody>\r\n                </table>\r\n                {/* } */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalkList;"]},"metadata":{},"sourceType":"module"}