{"ast":null,"code":"var _jsxFileName = \"C:\\\\env\\\\react\\\\next_chat\\\\components\\\\TalkRoom.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport Lib from '../static/chat_lib';\nimport Router from 'next/router';\n\nclass TalkRoom extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"style\", {\n      fontSize: '12pt',\n      padding: '5px 10px'\n    });\n\n    this.state = {\n      friendId: Router.query.id,\n      talkData: [],\n      content: '',\n      lastId: -1\n    };\n    console.log(Router.query.id);\n    this.getTalkData();\n  } // トーク内容を取得\n\n\n  getTalkData() {\n    let db = firebase.database();\n    let ref = db.ref('messages/1/' + this.state.friendId);\n    let self = this;\n    let d = [];\n    ref.orderByKey().on('value', snapshot => {\n      self.setState({\n        talkData: snapshot.val()\n      });\n    });\n  } // トーク履歴を作成\n\n\n  createTalkData() {\n    let result = [];\n\n    if (this.state.talkData == null || this.state.talkData.length == 0) {\n      return [__jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }\n      }, \"No Talk Data.\"))];\n    }\n\n    for (let i in this.state.talkData) {\n      result.push(__jsx(\"tr\", {\n        class: this.state.talkData[i].from_flag == 1 ? \"from_style\" : \"to_style\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      }, this.state.talkData[i].content), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, this.state.talkData[i].create_date)));\n    }\n\n    return result;\n  } // 最後のIDを取得\n\n\n  getLastId() {\n    let db = firebase.database();\n    let ref = db.ref('messages/1');\n    let self = this;\n    ref.orderByKey().limitToLast(1).on('value', snapshot => {\n      let res = snapshot.val();\n\n      for (let i in res) {\n        self.setState({\n          lastId: i\n        });\n        return;\n      }\n    });\n  } // メッセージ送信\n\n\n  doAction(e) {\n    let key = this.state.content;\n    let data = {\n      content: this.state.content,\n      from_flag: 1,\n      read_flag: 0 // create_date: new Date(),\n      // update_date: new Date()\n\n    };\n  } // 戻る\n\n\n  go() {\n    Router.push('/home');\n  }\n\n  render() {\n    if (this.state.talkData == null || this.state.talkData.length == 0) {\n      this.getTalkData();\n    }\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, __jsx(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, this.createTalkData(), __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    }, __jsx(\"input\", {\n      type: \"text\",\n      size: \"30\",\n      value: this.state.content,\n      onChange: this.onChangeContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    })), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, __jsx(\"button\", {\n      onClick: this.doAction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 33\n      }\n    }, \"send\"))))), __jsx(\"button\", {\n      onClick: this.go.bind(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, \"back\"));\n  }\n\n}\n\nexport default TalkRoom;","map":{"version":3,"sources":["C:/env/react/next_chat/components/TalkRoom.js"],"names":["React","Component","firebase","Lib","Router","TalkRoom","constructor","props","fontSize","padding","state","friendId","query","id","talkData","content","lastId","console","log","getTalkData","db","database","ref","self","d","orderByKey","on","snapshot","setState","val","createTalkData","result","length","i","push","from_flag","create_date","getLastId","limitToLast","res","doAction","e","key","data","read_flag","go","render","onChangeContent","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\nimport 'firebase/storage';\r\nimport Lib from '../static/chat_lib';\r\nimport Router from 'next/router';\r\n\r\nclass TalkRoom extends Component {\r\n\r\n    style = {\r\n        fontSize: '12pt',\r\n        padding: '5px 10px'\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            friendId: Router.query.id,\r\n            talkData: [],\r\n            content: '',\r\n            lastId: -1\r\n        }\r\n        console.log(Router.query.id);\r\n        this.getTalkData();\r\n    }\r\n\r\n    // トーク内容を取得\r\n    getTalkData() {\r\n        let db = firebase.database();\r\n        let ref = db.ref('messages/1/' + this.state.friendId);\r\n        let self = this;\r\n        let d = [];\r\n        ref.orderByKey().on('value', (snapshot) => {\r\n            self.setState({\r\n                talkData: snapshot.val()\r\n            });\r\n        });\r\n    }\r\n\r\n    // トーク履歴を作成\r\n    createTalkData() {\r\n        let result = [];\r\n        if (this.state.talkData == null || this.state.talkData.length == 0) {\r\n            return [<tr><td>No Talk Data.</td></tr>];\r\n        }\r\n        for (let i in this.state.talkData) {\r\n            result.push(\r\n                <tr class={this.state.talkData[i].from_flag == 1 ? \"from_style\" : \"to_style\"}>\r\n                    <td>\r\n                        {this.state.talkData[i].content}\r\n                    </td>\r\n                    <td>\r\n                        {this.state.talkData[i].create_date}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // 最後のIDを取得\r\n    getLastId() {\r\n        let db = firebase.database();\r\n        let ref = db.ref('messages/1');\r\n        let self = this;\r\n        ref.orderByKey().limitToLast(1).on('value', (snapshot) => {\r\n            let res = snapshot.val();\r\n            for(let i in res) {\r\n                self.setState({\r\n                    lastId:i\r\n                });\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    // メッセージ送信\r\n    doAction(e) {\r\n        let key = this.state.content;\r\n        let data = {\r\n            content: this.state.content,\r\n            from_flag: 1,\r\n            read_flag: 0,\r\n            // create_date: new Date(),\r\n            // update_date: new Date()\r\n        }\r\n    }\r\n\r\n    // 戻る\r\n    go() {\r\n        Router.push('/home');\r\n    }\r\n\r\n    render() {\r\n        if (this.state.talkData == null || this.state.talkData.length == 0) {\r\n            this.getTalkData();\r\n        }\r\n        return (\r\n            <div>\r\n                <table>\r\n                    <tbody>\r\n                        {this.createTalkData()}\r\n                        <tr>\r\n                            <td><input type=\"text\" size=\"30\" value={this.state.content} onChange={this.onChangeContent} /></td>\r\n                            <td><button onClick={this.doAction}>send</button></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <button onClick={this.go.bind()}>back</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TalkRoom;"]},"metadata":{},"sourceType":"module"}