{"ast":null,"code":"var _jsxFileName = \"C:\\\\env\\\\react\\\\next_chat\\\\components\\\\TalkList.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport Router from 'next/router';\n\nclass TalkList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"style\", {\n      fontSize: '12pt',\n      padding: '5px 10px'\n    });\n\n    this.state = {\n      data: [],\n      activeUserData: [],\n      talkData: []\n    };\n    this.getUserList();\n  } // 友人データ取得\n\n\n  getUserList() {\n    let db = firebase.database();\n    let ref = db.ref('friends/1');\n    let self = this;\n    ref.orderByKey().on('value', snapshot => {\n      self.setState({\n        data: snapshot.val()\n      }, () => {\n        this.getActiveUserList();\n      });\n    });\n  } // アクティブユーザのみデータ取得\n\n\n  getActiveUserList() {\n    let activeUserList = [];\n    let db = firebase.database();\n    let ref;\n    let self = this;\n\n    for (let i in this.state.data) {\n      if (this.state.data[i].active_flag == 0) {\n        break;\n      }\n\n      ref = db.ref('user_info/' + i);\n      ref.orderByKey().on('value', snapshot => {\n        activeUserList.push(snapshot.val());\n        self.setState({\n          activeUserData: activeUserList\n        });\n      }, () => {\n        this.getTalkList();\n      });\n    }\n  } // トークリスト取得\n\n\n  getTalkList() {\n    let talkList = [];\n    let db = firebase.database();\n    let ref;\n    let self = this;\n\n    for (let i in this.state.activeUserData) {\n      ref = db.ref('messages/1/' + i);\n      ref.orderByKey().limitToLast(1).on('value', snapshot => {\n        talkList.push(snapshot.val());\n        self.setState({\n          talkData: talkList\n        });\n      });\n    }\n  } // 表示するトークリストの生成\n\n\n  createTalkList() {\n    let result = [];\n\n    if (this.state.talkData == null || this.state.talkData.length == 0) {\n      return [__jsx(\"tr\", {\n        key: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      }, __jsx(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 33\n        }\n      }, \"NO DATA.\"))];\n    }\n\n    for (let i in this.state.talkData) {\n      result.push(__jsx(\"tr\", {\n        \"data-tag\": this.state.talkData[i].id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, \"username\"), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, this.state.talkData[i].content)));\n    }\n\n    return result;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, __jsx(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, this.createTalkList())));\n  }\n\n}\n\nexport default TalkList;","map":{"version":3,"sources":["C:/env/react/next_chat/components/TalkList.js"],"names":["React","Component","firebase","Router","TalkList","constructor","props","fontSize","padding","state","data","activeUserData","talkData","getUserList","db","database","ref","self","orderByKey","on","snapshot","setState","val","getActiveUserList","activeUserList","i","active_flag","push","getTalkList","talkList","limitToLast","createTalkList","result","length","id","content","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\nimport 'firebase/storage';\r\nimport Router from 'next/router';\r\n\r\nclass TalkList extends Component {\r\n    style = {\r\n        fontSize: '12pt',\r\n        padding: '5px 10px'\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            activeUserData: [],\r\n            talkData: []\r\n        }\r\n        this.getUserList();\r\n    }\r\n\r\n    // 友人データ取得\r\n    getUserList() {\r\n        let db = firebase.database();\r\n        let ref = db.ref('friends/1');\r\n        let self = this;\r\n        ref.orderByKey().on('value', (snapshot) => {\r\n            self.setState({\r\n                data: snapshot.val()\r\n            }, () => {this.getActiveUserList();});\r\n        });\r\n    }\r\n\r\n    // アクティブユーザのみデータ取得\r\n    getActiveUserList() {\r\n        let activeUserList = [];\r\n        let db = firebase.database();\r\n        let ref;\r\n        let self = this;\r\n\r\n        for (let i in this.state.data) {\r\n            if (this.state.data[i].active_flag == 0) {\r\n                break;\r\n            }\r\n            ref = db.ref('user_info/' + i);\r\n            ref.orderByKey().on('value', (snapshot) => {\r\n                activeUserList.push(snapshot.val());\r\n                self.setState({\r\n                    activeUserData: activeUserList\r\n                });\r\n            }, () => {this.getTalkList()});\r\n        }\r\n    }\r\n\r\n    // トークリスト取得\r\n    getTalkList() {\r\n        let talkList = [];\r\n        let db = firebase.database();\r\n        let ref;\r\n        let self = this;\r\n\r\n        for (let i in this.state.activeUserData) {\r\n            ref = db.ref('messages/1/' + i);\r\n            ref.orderByKey().limitToLast(1).on('value', (snapshot) => {\r\n                talkList.push(snapshot.val());\r\n                self.setState({\r\n                    talkData: talkList\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    // 表示するトークリストの生成\r\n    createTalkList() {\r\n        let result = [];\r\n        if (this.state.talkData == null || this.state.talkData.length == 0) {\r\n            return [<tr key=\"0\"><th>NO DATA.</th></tr>];\r\n        }\r\n        for (let i in this.state.talkData) {\r\n            result.push(\r\n                <tr data-tag={this.state.talkData[i].id}>\r\n                    <td>username</td>\r\n                    <td>\r\n                        {this.state.talkData[i].content}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* {this.state.talkList.length == 0\r\n                ?\r\n                <p>Please wait...</p>\r\n                : */}\r\n                <table>\r\n                    <tbody>\r\n                        {this.createTalkList()}\r\n                    </tbody>\r\n                </table>\r\n                {/* } */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalkList;"]},"metadata":{},"sourceType":"module"}