{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\env\\\\react\\\\next_chat\\\\components\\\\TalkRoom.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport Lib from '../static/chat_lib';\nimport Router from 'next/router';\n\nvar TalkRoom = /*#__PURE__*/function (_Component) {\n  _inherits(TalkRoom, _Component);\n\n  var _super = _createSuper(TalkRoom);\n\n  function TalkRoom(props) {\n    var _this;\n\n    _classCallCheck(this, TalkRoom);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"style\", {\n      fontSize: '12pt',\n      padding: '5px 10px'\n    });\n\n    _this.state = {\n      friendId: Router.query.id,\n      talkData: [],\n      content: '',\n      lastId: -1\n    };\n\n    _this.getLastId();\n\n    _this.getTalkData();\n\n    return _this;\n  } // トーク内容を取得\n\n\n  _createClass(TalkRoom, [{\n    key: \"getTalkData\",\n    value: function getTalkData() {\n      var db = firebase.database();\n      var ref = db.ref('messages/1/' + this.state.friendId);\n      var self = this;\n      var d = [];\n      ref.orderByKey().on('value', function (snapshot) {\n        self.setState({\n          talkData: snapshot.val()\n        });\n      });\n    } // トーク履歴を作成\n\n  }, {\n    key: \"createTalkData\",\n    value: function createTalkData() {\n      var result = [];\n\n      if (this.state.talkData == null || this.state.talkData.length == 0) {\n        return [__jsx(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }\n        }, __jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }\n        }, \"No Talk Data.\"))];\n      }\n\n      for (var i in this.state.talkData) {\n        result.push(__jsx(\"tr\", {\n          \"class\": this.state.talkData[i].from_flag == 1 ? \"from_style\" : \"to_style\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }\n        }, __jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }\n        }, this.state.talkData[i].content), __jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }\n        }, this.state.talkData[i].create_date)));\n      }\n\n      return result;\n    } // 最後のIDを取得\n\n  }, {\n    key: \"getLastId\",\n    value: function getLastId() {\n      var db = firebase.database();\n      var ref = db.ref('messages/1');\n      var self = this;\n      ref.orderByKey().limitToLast(1).on('value', function (snapshot) {\n        var res = snapshot.val();\n\n        for (var i in res) {\n          self.setState({\n            lastId: i\n          });\n          return;\n        }\n      });\n    } // メッセージ送信\n\n  }, {\n    key: \"doAction\",\n    value: function doAction(e) {\n      if (this.state.lastId == -1) {\n        this.getLastId();\n      }\n\n      var key = this.state.content;\n      var now = new Date().toLocaleString();\n      var id = this.state.lastId * 1 + 1;\n      var data = {\n        content: this.state.content,\n        from_flag: 1,\n        read_flag: 0,\n        create_date: now,\n        update_date: now\n      };\n      var db = firebase.database();\n      var ref = db.ref('messages/1/' + this.state.friendId + '/' + id);\n      ref.set(data);\n      this.setState({\n        friendId: Router.query.id,\n        talkData: [],\n        content: '',\n        lastId: -1\n      });\n    } // 戻る\n\n  }, {\n    key: \"go\",\n    value: function go() {\n      Router.push('/home');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.talkData == null || this.state.talkData.length == 0) {\n        this.getTalkData();\n      }\n\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }, __jsx(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, this.createTalkData(), __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }\n      }, __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }\n      }, __jsx(\"input\", {\n        type: \"text\",\n        size: \"30\",\n        value: this.state.content,\n        onChange: this.onChangeContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 33\n        }\n      })), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }\n      }, __jsx(\"button\", {\n        onClick: this.doAction,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 33\n        }\n      }, \"send\"))))), __jsx(\"button\", {\n        onClick: this.go.bind(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }\n      }, \"back\"));\n    }\n  }]);\n\n  return TalkRoom;\n}(Component);\n\nexport default TalkRoom;","map":{"version":3,"sources":["C:/env/react/next_chat/components/TalkRoom.js"],"names":["React","Component","firebase","Lib","Router","TalkRoom","props","fontSize","padding","state","friendId","query","id","talkData","content","lastId","getLastId","getTalkData","db","database","ref","self","d","orderByKey","on","snapshot","setState","val","result","length","i","push","from_flag","create_date","limitToLast","res","e","key","now","Date","toLocaleString","data","read_flag","update_date","set","createTalkData","onChangeContent","doAction","go","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\nimport 'firebase/storage';\r\nimport Lib from '../static/chat_lib';\r\nimport Router from 'next/router';\r\n\r\nclass TalkRoom extends Component {\r\n\r\n    style = {\r\n        fontSize: '12pt',\r\n        padding: '5px 10px'\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            friendId: Router.query.id,\r\n            talkData: [],\r\n            content: '',\r\n            lastId: -1\r\n        }\r\n        this.getLastId();\r\n        this.getTalkData();\r\n    }\r\n\r\n    // トーク内容を取得\r\n    getTalkData() {\r\n        let db = firebase.database();\r\n        let ref = db.ref('messages/1/' + this.state.friendId);\r\n        let self = this;\r\n        let d = [];\r\n        ref.orderByKey().on('value', (snapshot) => {\r\n            self.setState({\r\n                talkData: snapshot.val()\r\n            });\r\n        });\r\n    }\r\n\r\n    // トーク履歴を作成\r\n    createTalkData() {\r\n        let result = [];\r\n        if (this.state.talkData == null || this.state.talkData.length == 0) {\r\n            return [<tr><td>No Talk Data.</td></tr>];\r\n        }\r\n        for (let i in this.state.talkData) {\r\n            result.push(\r\n                <tr class={this.state.talkData[i].from_flag == 1 ? \"from_style\" : \"to_style\"}>\r\n                    <td>\r\n                        {this.state.talkData[i].content}\r\n                    </td>\r\n                    <td>\r\n                        {this.state.talkData[i].create_date}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // 最後のIDを取得\r\n    getLastId() {\r\n        let db = firebase.database();\r\n        let ref = db.ref('messages/1');\r\n        let self = this;\r\n        ref.orderByKey().limitToLast(1).on('value', (snapshot) => {\r\n            let res = snapshot.val();\r\n            for(let i in res) {\r\n                self.setState({\r\n                    lastId:i\r\n                });\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    // メッセージ送信\r\n    doAction(e) {\r\n        if (this.state.lastId == -1) {\r\n            this.getLastId();\r\n        }\r\n        let key = this.state.content;\r\n        let now = new Date().toLocaleString();\r\n        let id = this.state.lastId * 1 + 1;\r\n        let data = {\r\n            content: this.state.content,\r\n            from_flag: 1,\r\n            read_flag: 0,\r\n            create_date: now,\r\n            update_date: now\r\n        }\r\n        let db = firebase.database();\r\n        let ref = db.ref('messages/1/' + this.state.friendId + '/' + id);\r\n        ref.set(data);\r\n        this.setState({\r\n            friendId: Router.query.id,\r\n            talkData: [],\r\n            content: '',\r\n            lastId: -1\r\n        })\r\n    }\r\n\r\n    // 戻る\r\n    go() {\r\n        Router.push('/home');\r\n    }\r\n\r\n    render() {\r\n        if (this.state.talkData == null || this.state.talkData.length == 0) {\r\n            this.getTalkData();\r\n        }\r\n        return (\r\n            <div>\r\n                <table>\r\n                    <tbody>\r\n                        {this.createTalkData()}\r\n                        <tr>\r\n                            <td><input type=\"text\" size=\"30\" value={this.state.content} onChange={this.onChangeContent} /></td>\r\n                            <td><button onClick={this.doAction}>send</button></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <button onClick={this.go.bind()}>back</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TalkRoom;"]},"metadata":{},"sourceType":"module"}